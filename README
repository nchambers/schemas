
Prerequisites
-------------

CAEVO uses the WordNet dictionaries. The dictionary files can be
downloaded from:

    http://wordnetcode.princeton.edu/wn3.1.dict.tar.gz

You also need a jwnl_file_properties.xml file that points to the location of
your downloaded dictionary. The dictionary and this file can be stored anywhere
on your drive. CAEVO looks for an environment variable JWNL that should have the
path to the xml file.


CODE EXECUTION STEPS
--------------------

-----------------------------------------
(1) Pre-Process the text.

The java class AllParser handles parsing, dependencies, events, and coreference. 
The run script runallparser.sh can be used.

./runallparser.sh -output <output-directory> -input text <input-directory>

This requires the parser's serialized file: englishPCFG.ser.gz 
AllParser searches a couple paths for that file, including the current directory. You could use a symlink to point to it.

* The "-input text" flag defines the type of input. This version has not been extensively tested. Check TextHandler.java if fixes need to be made. It treats each file as a single document.



-----------------------------------------
(2) Compute Inverse Document Frequencies.

The class CalculateIDF handles word counting and IDF computation.
It inputs a directory or single file of .parse files (created from Step 1), and 
creates two .idf files in a specified output directory. A run script is provided:

./runidf.sh -outdir idfs/ someoutput/

You must create the output directory before running it.



-----------------------------------------
(3) Create the domain's argument counts.